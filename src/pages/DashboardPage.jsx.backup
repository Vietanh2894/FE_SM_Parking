import React, { useState, useEffect } from 'react';
import axios from 'axios';
import DashboardNavigation from '../components/DashboardNavigation';
import { useAuth } from '../hooks/useAuth';

const DashboardPage = () => {
    const { user } = useAuth();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [dashboardData, setDashboardData] = useState({
        tota                                <div className="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-indigo-600">üèçÔ∏è</span>
                                </div>ers: 0,
        totalVehicles: 0,
        totalStaff: 0,
        totalRoles: 0,
        totalAccounts: 0,
        totalParkingLots: 0,
        totalVehicleTypes: 0,
        totalActiveParkingModes: 0
    });
    const [recentActivity, setRecentActivity] = useState([]);
    const [systemStats, setSystemStats] = useState({
        activeUsers: 0,
        activeStaff: 0,
        totalMotorbikesParked: 0,
        totalCarsParked: 0,
        totalVehiclesInAllParkingLots: 0
    });

    useEffect(() => {
        fetchDashboardData();
    }, []);

    const fetchDashboardData = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem('token');
            
            if (!token) {
                setError('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
                setLoading(false);
                return;
            }

            console.log('Fetching dashboard data...');

            // Fetch data from all endpoints with individual error handling
            const fetchPromises = [
                axios.get('http://localhost:8080/users', {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).catch(err => {
                    console.log('Users API failed:', err.message);
                    return { data: { data: [] } };
                }),
                axios.get('http://localhost:8080/vehicles', {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).catch(err => {
                    console.log('Vehicles API failed:', err.message);
                    return { data: { data: [] } };
                }),
                axios.get('http://localhost:8080/staff', {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).catch(err => {
                    console.log('Staff API failed:', err.message);
                    return { data: { data: [] } };
                }),
                axios.get('http://localhost:8080/roles', {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).catch(err => {
                    console.log('Roles API failed:', err.message);
                    return { data: { data: [] } };
                }),
                axios.get('http://localhost:8080/accounts', {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).catch(err => {
                    console.log('Accounts API failed:', err.message);
                    return { data: { data: [] } };
                }),
                axios.get('http://localhost:8080/parking-lots', {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).catch(err => {
                    console.log('Parking Lots API failed:', err.message);
                    return { data: { data: [] } };
                })
            ];

            const [
                usersRes,
                vehiclesRes,
                staffRes,
                rolesRes,
                accountsRes,
                parkingLotsRes
            ] = await Promise.all(fetchPromises);

            console.log('API Responses:', {
                users: usersRes.data,
                vehicles: vehiclesRes.data,
                staff: staffRes.data,
                roles: rolesRes.data,
                accounts: accountsRes.data,
                parkingLots: parkingLotsRes.data
            });

            // Process results safely
            const userData = Array.isArray(usersRes.data?.data) ? usersRes.data.data : [];
            const vehicleData = Array.isArray(vehiclesRes.data?.data) ? vehiclesRes.data.data : [];
            const staffData = Array.isArray(staffRes.data?.data) ? staffRes.data.data : [];
            const rolesData = Array.isArray(rolesRes.data?.data) ? rolesRes.data.data : [];
            const accountsData = Array.isArray(accountsRes.data?.data) ? accountsRes.data.data : [];
            const parkingLotsData = Array.isArray(parkingLotsRes.data?.data) ? parkingLotsRes.data.data : [];

            console.log('Processed data:', {
                userData: userData.length,
                vehicleData: vehicleData.length,
                staffData: staffData.length,
                rolesData: rolesData.length,
                accountsData: accountsData.length,
                parkingLotsData: parkingLotsData.length
            });

            setDashboardData({
                totalUsers: userData.length,
                totalVehicles: vehicleData.length,
                totalStaff: staffData.length,
                totalRoles: rolesData.length,
                totalAccounts: accountsData.length,
                totalParkingLots: parkingLotsData.length, // Now using real data
                totalVehicleTypes: 0, // Default since no API
                totalActiveParkingModes: 0 // Default since no API
            });

            // Calculate system stats safely
            const motorbikesParked = vehicleData.filter(vehicle => 
                vehicle.maLoaiXe?.tenLoaiXe === 'Xe m√°y'
            ).length;
            
            const carsParked = vehicleData.filter(vehicle => 
                vehicle.maLoaiXe?.tenLoaiXe === 'Xe √¥ t√¥'
            ).length;

            // Calculate actual vehicles parked based on parking lots capacity
            const motorbikesInParkingLots = parkingLotsData
                .filter(lot => lot.maLoaiXe?.tenLoaiXe === 'Xe m√°y')
                .reduce((total, lot) => total + (lot.tongSoCho - lot.soChoTrong), 0);

            const carsInParkingLots = parkingLotsData
                .filter(lot => lot.maLoaiXe?.tenLoaiXe === 'Xe √¥ t√¥')
                .reduce((total, lot) => total + (lot.tongSoCho - lot.soChoTrong), 0);

            const totalVehiclesInParkingLots = motorbikesInParkingLots + carsInParkingLots;

            console.log('Vehicle classification:', {
                totalVehicles: vehicleData.length,
                motorbikes: motorbikesParked,
                cars: carsParked,
                others: vehicleData.length - motorbikesParked - carsParked,
                parkingLotStats: {
                    motorbikesInLots: motorbikesInParkingLots,
                    carsInLots: carsInParkingLots,
                    totalInLots: totalVehiclesInParkingLots
                },
                sampleVehicleTypes: vehicleData.slice(0, 5).map(v => ({
                    id: v.maXe,
                    type: v.maLoaiXe?.tenLoaiXe,
                    bienSo: v.bienSo
                })),
                allVehicleTypes: [...new Set(vehicleData.map(v => v.maLoaiXe?.tenLoaiXe))],
                calculation: `Registered - Xe m√°y: ${motorbikesParked} + Xe √¥ t√¥: ${carsParked} = ${motorbikesParked + carsParked}, T·ªïng: ${vehicleData.length}`,
                parkingCalculation: `In Lots - Xe m√°y: ${motorbikesInParkingLots} + Xe √¥ t√¥: ${carsInParkingLots} = ${totalVehiclesInParkingLots}`
            });
            
            setSystemStats({
                activeUsers: userData.filter(user => user.account?.trangThai === 'ENABLE').length,
                activeStaff: staffData.filter(staff => staff.account?.trangThai === 'ENABLE').length,
                totalMotorbikesParked: motorbikesInParkingLots, // Real data from parking lots
                totalCarsParked: carsInParkingLots, // Real data from parking lots
                totalVehiclesInAllParkingLots: totalVehiclesInParkingLots // Total vehicles actually parked
            });

            // Mock recent activity
            setRecentActivity([
                {
                    id: 1,
                    action: 'ƒêƒÉng nh·∫≠p h·ªá th·ªëng',
                    user: user?.username || 'admin',
                    time: '5 ph√∫t tr∆∞·ªõc',
                    type: 'login',
                    icon: 'üîë'
                },
                {
                    id: 2,
                    action: 'Th√™m ph∆∞∆°ng ti·ªán m·ªõi',
                    user: 'staff_user',
                    time: '15 ph√∫t tr∆∞·ªõc',
                    type: 'create',
                    icon: 'üöó'
                },
                {
                    id: 3,
                    action: 'C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n',
                    user: user?.username || 'admin',
                    time: '30 ph√∫t tr∆∞·ªõc',
                    type: 'update',
                    icon: 'üë§'
                },
                {
                    id: 4,
                    action: 'T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng',
                    user: 'hr_staff',
                    time: '1 gi·ªù tr∆∞·ªõc',
                    type: 'create',
                    icon: '‚ûï'
                },
                {
                    id: 5,
                    action: 'X√≥a role kh√¥ng s·ª≠ d·ª•ng',
                    user: user?.username || 'admin',
                    time: '2 gi·ªù tr∆∞·ªõc',
                    type: 'delete',
                    icon: 'üóëÔ∏è'
                }
            ]);

            setError('');
        } catch (error) {
            console.error('Error fetching dashboard data:', error);
            setError('L·ªói khi t·∫£i d·ªØ li·ªáu dashboard: ' + error.message);
            
            // Set default values even on error
            setDashboardData({
                totalUsers: 0,
                totalVehicles: 0,
                totalStaff: 0,
                totalRoles: 0,
                totalAccounts: 0,
                totalParkingLots: 0,
                totalVehicleTypes: 0,
                totalActiveParkingModes: 0
            });
            
            setSystemStats({
                activeUsers: 0,
                activeStaff: 0,
                totalMotorbikesParked: 0,
                totalCarsParked: 0,
                totalVehiclesInAllParkingLots: 0
            });
        } finally {
            setLoading(false);
        }
    };

    const getGreeting = () => {
        const hour = new Date().getHours();
        if (hour < 12) return 'Ch√†o bu·ªïi s√°ng';
        if (hour < 18) return 'Ch√†o bu·ªïi chi·ªÅu';
        return 'Ch√†o bu·ªïi t·ªëi';
    };

    const getCurrentDate = () => {
        return new Date().toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    const getActionColor = (type) => {
        switch (type) {
            case 'login': return 'text-blue-600 bg-blue-100';
            case 'create': return 'text-green-600 bg-green-100';
            case 'update': return 'text-yellow-600 bg-yellow-100';
            case 'delete': return 'text-red-600 bg-red-100';
            default: return 'text-gray-600 bg-gray-100';
        }
    };

    const quickMenuItems = [
        { name: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng', icon: 'üë•', path: '/users', color: 'from-blue-500 to-blue-600' },
        { name: 'Qu·∫£n l√Ω ph∆∞∆°ng ti·ªán', icon: 'üöó', path: '/vehicles', color: 'from-green-500 to-green-600' },
        { name: 'Qu·∫£n l√Ω nh√¢n vi√™n', icon: 'üë§', path: '/staff', color: 'from-purple-500 to-purple-600' },
        { name: 'Qu·∫£n l√Ω t√†i kho·∫£n', icon: 'üîê', path: '/accounts', color: 'from-orange-500 to-orange-600' },
        { name: 'Qu·∫£n l√Ω b√£i ƒë·ªó xe', icon: 'üÖøÔ∏è', path: '/parking-lots', color: 'from-indigo-500 to-indigo-600' },
        { name: 'Qu·∫£n l√Ω ch·ª©c v·ª•', icon: 'üè∑Ô∏è', path: '/roles', color: 'from-pink-500 to-pink-600' }
    ];

    if (loading) {
        return (
            <>
                <DashboardNavigation />
                <div className="ml-64 min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
                    <div className="flex items-center justify-center h-screen">
                        <div className="text-center">
                            <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto mb-4"></div>
                            <p className="text-lg text-gray-600 font-medium">ƒêang t·∫£i dashboard...</p>
                        </div>
                    </div>
                </div>
            </>
        );
    }

    return (
        <>
            <DashboardNavigation />
            <div className="ml-64 min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
                <div className="p-8">
                    {/* Header Section */}
                    <div className="mb-8">
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                                <div>
                                    <h1 className="text-3xl font-bold text-gray-800 mb-2 flex items-center gap-3">
                                        <span className="text-4xl">üìä</span>
                                        {getGreeting()}, {user?.username || 'Admin'}!
                                    </h1>
                                    <p className="text-gray-600">{getCurrentDate()}</p>
                                    <p className="text-sm text-gray-500 mt-1">T·ªïng quan h·ªá th·ªëng qu·∫£n l√Ω b√£i ƒë·ªó xe</p>
                                </div>
                                
                                <div className="flex gap-3">
                                    <button
                                        onClick={fetchDashboardData}
                                        className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105 flex items-center gap-2"
                                        title="L√†m m·ªõi"
                                    >
                                        <span className="text-lg">üîÑ</span>
                                        <span className="hidden sm:inline">L√†m m·ªõi</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Error Message */}
                    {error && (
                        <div className="mb-6 p-4 rounded-lg shadow-md bg-red-100 text-red-800 border border-red-200">
                            <div className="flex items-center gap-2">
                                <span className="text-lg">‚ùå</span>
                                {error}
                            </div>
                        </div>
                    )}

                    {/* Main Stats Cards */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng ng∆∞·ªùi d√πng</p>
                                    <p className="text-3xl font-bold text-blue-600">{dashboardData.totalUsers}</p>
                                    <p className="text-sm text-green-600 mt-1">
                                        ‚úÖ {systemStats.activeUsers} ƒëang ho·∫°t ƒë·ªông
                                    </p>
                                </div>
                                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-blue-600">üë•</span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng ph∆∞∆°ng ti·ªán</p>
                                    <p className="text-3xl font-bold text-green-600">{dashboardData.totalVehicles}</p>
                                    <p className="text-sm text-gray-500 mt-1">
                                        üöó {dashboardData.totalVehicleTypes} lo·∫°i xe
                                    </p>
                                </div>
                                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-green-600">üöó</span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-purple-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng nh√¢n vi√™n</p>
                                    <p className="text-3xl font-bold text-purple-600">{dashboardData.totalStaff}</p>
                                    <p className="text-sm text-green-600 mt-1">
                                        ‚úÖ {systemStats.activeStaff} ƒëang l√†m vi·ªác
                                    </p>
                                </div>
                                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-purple-600">üë§</span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-orange-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng b√£i ƒë·ªó xe</p>
                                    <p className="text-3xl font-bold text-orange-600">{dashboardData.totalParkingLots}</p>
                                    <p className="text-sm text-green-600 mt-1">
                                        ‚úÖ {dashboardData.totalActiveParkingModes} ƒëang ho·∫°t ƒë·ªông
                                    </p>
                                </div>
                                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-orange-600">üÖøÔ∏è</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Secondary Stats Cards */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-pink-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng t√†i kho·∫£n</p>
                                    <p className="text-3xl font-bold text-pink-600">{dashboardData.totalAccounts}</p>
                                </div>
                                <div className="w-12 h-12 bg-pink-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-pink-600">üîê</span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-indigo-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng s·ªë xe m√°y trong b√£i ƒëang ƒë·ªó</p>
                                    <p className="text-3xl font-bold text-indigo-600">{systemStats.totalMotorbikesParked}</p>
                                </div>
                                <div className="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-indigo-600">ÔøΩÔ∏è</span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-yellow-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng s·ªë xe √¥ t√¥ trong b√£i ƒëang ƒë·ªó</p>
                                    <p className="text-3xl font-bold text-yellow-600">{systemStats.totalCarsParked}</p>
                                </div>
                                <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-yellow-600">ÔøΩ</span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-red-500">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-gray-600 text-sm font-medium">T·ªïng s·ªë xe trong t·∫•t c·∫£ b√£i ƒë·ªó</p>
                                    <p className="text-3xl font-bold text-red-600">{systemStats.totalVehiclesInAllParkingLots}</p>
                                </div>
                                <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                                    <span className="text-2xl text-red-600">üöô</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Quick Actions & Recent Activity */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {/* Quick Actions */}
                        <div className="bg-white rounded-xl shadow-lg p-6">
                            <div className="flex items-center gap-3 mb-6">
                                <span className="text-3xl">‚ö°</span>
                                <h2 className="text-xl font-bold text-gray-800">Truy c·∫≠p nhanh</h2>
                            </div>
                            <div className="grid grid-cols-2 gap-4">
                                {quickMenuItems.map((item, index) => (
                                    <button
                                        key={index}
                                        onClick={() => window.location.href = item.path}
                                        className={`bg-gradient-to-r ${item.color} text-white p-4 rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-200 text-left`}
                                    >
                                        <div className="flex items-center gap-3">
                                            <span className="text-2xl">{item.icon}</span>
                                            <span className="font-semibold text-sm">{item.name}</span>
                                        </div>
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* Recent Activity */}
                        <div className="bg-white rounded-xl shadow-lg p-6">
                            <div className="flex items-center gap-3 mb-6">
                                <span className="text-3xl">üìù</span>
                                <h2 className="text-xl font-bold text-gray-800">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h2>
                            </div>
                            <div className="space-y-4">
                                {recentActivity.map((activity) => (
                                    <div key={activity.id} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                                        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${getActionColor(activity.type)}`}>
                                            <span className="text-lg">{activity.icon}</span>
                                        </div>
                                        <div className="flex-1">
                                            <p className="font-medium text-gray-800">{activity.action}</p>
                                            <p className="text-sm text-gray-600">
                                                B·ªüi <span className="font-medium">{activity.user}</span> ‚Ä¢ {activity.time}
                                            </p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                            <div className="mt-4 pt-4 border-t border-gray-200">
                                <button className="text-blue-600 hover:text-blue-800 font-medium text-sm">
                                    Xem t·∫•t c·∫£ ho·∫°t ƒë·ªông ‚Üí
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

export default DashboardPage;
